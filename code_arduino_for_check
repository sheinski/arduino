#include <Wire.h>
#include <PID_v1.h>
#include <OneWire.h>
#include <LiquidCrystal_I2C.h>
#include <EEPROM.h>
LiquidCrystal_I2C _lcd1(0x3f, 12, 4);
int _dispTempLength1=0;
boolean _isNeedClearDisp1;
byte _d18x2x1Addr[8]={0x28, 0xFF, 0xA5, 0x10, 0x31, 0x18, 0x2, 0xC2};
double _PID_2_Out=0.0;
double _PID_2_SP=0.0;
double _PID_2_In=0.0;
double _PID_2_Ki=0.0;
double _PID_2_Kp=0.0;
double _PID_2_Kd=0.0;
PID _PID_2(&_PID_2_In, &_PID_2_Out, &_PID_2_SP, 0, 0, 0, DIRECT);
OneWire  _ow17(17);
unsigned long _ow17P=0;
bool _ow17W=0;
const int _menuParametrsArray[]  PROGMEM =  {1, 8, 1, 0, 0, 0, 0, 0, 1, 2, 2, 0, 2, 4, 2, 0, 0, 0, 0, 0, 1, 4, 3, 0, 3, 4, 3, 0, 0, 0, 0, 0, 1, 4, 4, 0, 4, 4, 1, 0, 0, 0, 0, 0, 1, 4, 1, 0};
int _menuValueArray_int[3];
const int _menuConstantValuesArray_int[]  PROGMEM =  {1};
float _menuValueArray_float[1];
const float _menuConstantValuesArray_float[]  PROGMEM =  {0.1};
const char _flprogMenuNameString1[] PROGMEM = "Kd";
const char _flprogMenuNameString2[] PROGMEM = "Temperatura";
const char _flprogMenuNameString3[] PROGMEM = "Kp";
const char _flprogMenuNameString4[] PROGMEM = "Ki";
const char* const _flprogMenuStringsArray[] PROGMEM = { _flprogMenuNameString1,  _flprogMenuNameString2,  _flprogMenuNameString3,  _flprogMenuNameString4};
struct _menuItemStricture 
{
     int startInArrayIndex;
}
;
struct _menuMainStricture 
{
    int startIndex;
    int stopIndex;
    bool isSwitchMenuAroundRing;
    _menuItemStricture  currentItem;
}
;
_menuItemStricture _MenuItems[4];
_menuMainStricture _MainMenus[1];
bool _gtv1;
float _gtv2;
float _gtv3;
int _disp4oldLength = 0;
bool _trgt2 = 0;
bool _trgt2I = 0;
int _disp1oldLength = 0;
int _disp3oldLength = 0;
int _disp5oldLength = 0;
bool _tim2I = 0;
bool _tim2O = 0;
unsigned long _tim2P = 0UL;
bool _bounseInputD6S = 0;
bool _bounseInputD6O = 0;
unsigned long _bounseInputD6P = 0UL;
bool _bounseInputD8S = 0;
bool _bounseInputD8O = 0;
unsigned long _bounseInputD8P = 0UL;
String _MenuBlock_453277119_MNO;
String _MenuBlock_453277119_VNO;
bool _MenuBlock_453277119_OEIS = 0;
bool _MenuBlock_453277119_OMUIS = 0;
bool _MenuBlock_453277119_OMDIS = 0;
bool _MenuBlock_453277119_OVUIS = 0;
bool _MenuBlock_453277119_OVDIS = 0;
unsigned long _MenuBlock_453277119_VUDST = 0UL;
unsigned long _MenuBlock_453277119_VUDSPT = 0UL;
int _MenuBlock_453277119_VUDSM = 0;
int _MenuBlock_453277119_VUDPT = 0;
bool _PID_2_RelOut = 0;
unsigned long _PID_2_StartTime = 0UL;
unsigned long _d18x2x1Tti = 0UL;
float _d18x2x1O = 0.00;
bool _d18x2x1W = 0;
bool _bounseInputD7S = 0;
bool _bounseInputD7O = 0;
unsigned long _bounseInputD7P = 0UL;
int _disp2oldLength = 0;
bool _trgrt2 = 0;
bool _trgrt2I = 0;
bool _tempVariable_bool;
unsigned long _tempVariable_unsignedlong;
int _tempVariable_int;
float _tempVariable_float;
void setup()
{
    pinMode(6, INPUT_PULLUP);
    pinMode(7, INPUT_PULLUP);
    pinMode(8, INPUT_PULLUP);
    pinMode(11, OUTPUT);
    digitalWrite(11, 0);
    Wire.begin();
    delay(10);
    if(((readByteFromEEPROM(0, 0, 0x0))) != 113) 
    {
        (updateByteToEEPROM(0, 0, 0x0, (113)));
        (updateIntegerToEEPROM(1, 0, 0x0, (10000)));
        (updateFloatToEEPROM(3, 0, 0x0, (80)));
        (updateIntegerToEEPROM(7, 0, 0x0, (100)));
        (updateIntegerToEEPROM(9, 0, 0x0, (0)));
    }
    _lcd1.init();
    _lcd1.backlight();
    _bounseInputD6O =  digitalRead(6);
    _bounseInputD8O =  digitalRead(8);
    _bounseInputD7O =  digitalRead(7);
    _MenuItems[0].startInArrayIndex = 0;
    _MenuItems[1].startInArrayIndex = 12;
    _MenuItems[2].startInArrayIndex = 24;
    _MenuItems[3].startInArrayIndex = 36;
    _MainMenus[0].startIndex = 1;
    _MainMenus[0].isSwitchMenuAroundRing = 1;
    _MainMenus[0].stopIndex = 4;
    _MainMenus[0].currentItem = _MenuItems[0];
    _menuValueArray_int[0] = (readIntegerFromEEPROM(1, 0, 0x0));
    _menuValueArray_float[0] = (readFloatFromEEPROM(3, 0, 0x0));
    _menuValueArray_int[1] = (readIntegerFromEEPROM(7, 0, 0x0));
    _menuValueArray_int[2] = (readIntegerFromEEPROM(9, 0, 0x0));
    _PID_2.SetOutputLimits(0, 100);
    _PID_2.SetMode(AUTOMATIC);
    _PID_2_StartTime = millis();
}
void loop()
{
    if (_isNeedClearDisp1) 
    {
        _lcd1.clear();
        _isNeedClearDisp1= 0;
    }
    bool  _bounceInputTmpD6 =  (digitalRead (6));
    if (_bounseInputD6S)
    {
        if (millis() >= (_bounseInputD6P + 40))
        {
            _bounseInputD6O= _bounceInputTmpD6;
            _bounseInputD6S=0;
        }
    }
    else
    {
        if (_bounceInputTmpD6 != _bounseInputD6O)
        {
            _bounseInputD6S=1;
            _bounseInputD6P = millis();
        }
    }
    bool  _bounceInputTmpD8 =  (digitalRead (8));
    if (_bounseInputD8S)
    {
        if (millis() >= (_bounseInputD8P + 40))
        {
            _bounseInputD8O= _bounceInputTmpD8;
            _bounseInputD8S=0;
        }
    }
    else
    {
        if (_bounceInputTmpD8 != _bounseInputD8O)
        {
            _bounseInputD8S=1;
            _bounseInputD8P = millis();
        }
    }
    bool  _bounceInputTmpD7 =  (digitalRead (7));
    if (_bounseInputD7S)
    {
        if (millis() >= (_bounseInputD7P + 40))
        {
            _bounseInputD7O= _bounceInputTmpD7;
            _bounseInputD7S=0;
        }
    }
    else
    {
        if (_bounceInputTmpD7 != _bounseInputD7O)
        {
            _bounseInputD7S=1;
            _bounseInputD7P = millis();
        }
    }
    //Board:1
//Name:Меню
    if (!(_bounseInputD6O))
    {
         if (_tim2I) 
        {
             if (_isTimer(_tim2P, 2000)) 
            {
                _tim2O = 1;
            }
        }
         else 
        {
            _tim2I =1;
            _tim2P = millis();
        }
    }
     else 
    {
        _tim2O = 0;
        _tim2I = 0;
    }
    bool  _tmp2 = _tim2O;
    if (_tmp2)  
    {
         if (! _trgt2I) _trgt2 = ! _trgt2;
    }
    _trgt2I = _tmp2;
    _gtv1 = _trgt2;
    if (!(_bounseInputD6O)) 
    {
         if (_trgrt2I) 
        {
             _trgrt2 = 0;
        }
         else 
        {
            _trgrt2 = 1;
            _trgrt2I = 1;
        }
    }
     else 
    {
        _trgrt2 = 0;
        _trgrt2I = 0;
    }
    ;
    if (_gtv1) 
    {
        _tempVariable_bool  =  1;
        if (! _MenuBlock_453277119_OEIS) 
        {
            _MenuBlock_453277119_OEIS = 1;
        }
        _tempVariable_int = pgm_read_byte(&_menuParametrsArray[((_MainMenus[0].currentItem).startInArrayIndex)+10]);
        _MenuBlock_453277119_MNO = _readStringFromProgmem ((char*)pgm_read_word(&(_flprogMenuStringsArray[_tempVariable_int - 1])));
        _MenuBlock_453277119_VNO = _menuOutputValueString (0);
    }
     else 
    {
        _tempVariable_bool  =  0;
        if (_MenuBlock_453277119_OEIS)
        {
            _MenuBlock_453277119_OEIS = 0;
            _menuUpdateToEEpromItems();
        }
        _MenuBlock_453277119_MNO = "";
        _MenuBlock_453277119_VNO = "";
    }
    if(0) 
    {
         if (! _MenuBlock_453277119_OMUIS) 
        {
            _MenuBlock_453277119_OMUIS = 1;
            if(_tempVariable_bool)
            {
                _menuUpEvents(0);
                _menuUpdateToEEpromItems();
            }
        }
    }
     else 
    {
        _MenuBlock_453277119_OMUIS = 0;
    }
    if(_trgrt2) 
    {
         if (! _MenuBlock_453277119_OMDIS) 
        {
            _MenuBlock_453277119_OMDIS = 1;
            if(_tempVariable_bool)
            {
                _menuDownEvents(0);
                _menuUpdateToEEpromItems();
            }
        }
    }
     else 
    {
        _MenuBlock_453277119_OMDIS = 0;
    }
    if(!(_bounseInputD7O)) 
    {
         if (! _MenuBlock_453277119_OVUIS) 
        {
            _MenuBlock_453277119_OVUIS = 1;
            if(_tempVariable_bool)
            {
                  _valueUpEvents(0);
                _MenuBlock_453277119_VUDST = millis();
            }
        }
        if (_tempVariable_bool)
        {
            if (_MenuBlock_453277119_VUDSM == 0) 
            {
                 if (_isTimer(_MenuBlock_453277119_VUDST , 2000)) 
                {
                    _MenuBlock_453277119_VUDSM = 1;
                    _MenuBlock_453277119_VUDSPT = millis();
                    _MenuBlock_453277119_VUDPT  = 500;
                }
            }
              else 
            {
                 if (_MenuBlock_453277119_VUDSM == 1) 
                {
                     if (_isTimer(_MenuBlock_453277119_VUDST , 4000)) 
                    {
                        _MenuBlock_453277119_VUDSM = 2;
                        _MenuBlock_453277119_VUDPT  = 250;
                    }
                }
                 if (_isTimer(_MenuBlock_453277119_VUDSPT , _MenuBlock_453277119_VUDPT)) 
                {
                     _valueUpEvents(0);
                    _MenuBlock_453277119_VUDSPT = millis();
                }
            }
        }
    }
     else 
    {
        _MenuBlock_453277119_OVUIS = 0;
        if(! (!(_bounseInputD8O)))
        {
            _MenuBlock_453277119_VUDSM = 0;
        }
    }
    if(!(_bounseInputD8O)) 
    {
         if (! _MenuBlock_453277119_OVDIS) 
        {
            _MenuBlock_453277119_OVDIS = 1;
            if(_tempVariable_bool)
            {
                  _valueDownEvents(0);
                _MenuBlock_453277119_VUDST = millis();
            }
        }
         if (_tempVariable_bool)
        {
            if (_MenuBlock_453277119_VUDSM == 0) 
            {
                 if (_isTimer(_MenuBlock_453277119_VUDST , 2000)) 
                {
                    _MenuBlock_453277119_VUDSM = 1;
                    _MenuBlock_453277119_VUDSPT = millis();
                    _MenuBlock_453277119_VUDPT  = 500;
                }
            }
              else 
            {
                 if (_MenuBlock_453277119_VUDSM == 1) 
                {
                     if (_isTimer(_MenuBlock_453277119_VUDST , 4000)) 
                    {
                        _MenuBlock_453277119_VUDSM = 2;
                        _MenuBlock_453277119_VUDPT  = 250;
                    }
                }
                 if (_isTimer(_MenuBlock_453277119_VUDSPT , _MenuBlock_453277119_VUDPT)) 
                {
                     _valueDownEvents(0);
                    _MenuBlock_453277119_VUDSPT = millis();
                }
            }
        }
    }
     else 
    {
        _MenuBlock_453277119_OVDIS = 0;
        if(! (!(_bounseInputD7O)))
        {
            _MenuBlock_453277119_VUDSM = 0;
        }
    }
    if (_gtv1) 
    {
        _dispTempLength1 = ((_MenuBlock_453277119_VNO)).length();
        if (_disp1oldLength > _dispTempLength1) 
        {
            _isNeedClearDisp1 = 1;
        }
        _disp1oldLength = _dispTempLength1;
        _lcd1.setCursor(int((12 - _dispTempLength1)/2), 1);
        _lcd1.print((_MenuBlock_453277119_VNO));
    }
     else 
    {
        if (_disp1oldLength > 0) 
        {
            _isNeedClearDisp1 = 1;
            _disp1oldLength = 0;
        }
    }
    if (_gtv1) 
    {
        _dispTempLength1 = ((_MenuBlock_453277119_MNO)).length();
        if (_disp5oldLength > _dispTempLength1) 
        {
            _isNeedClearDisp1 = 1;
        }
        _disp5oldLength = _dispTempLength1;
        _lcd1.setCursor(int((12 - _dispTempLength1)/2), 0);
        _lcd1.print((_MenuBlock_453277119_MNO));
    }
     else 
    {
        if (_disp5oldLength > 0) 
        {
            _isNeedClearDisp1 = 1;
            _disp5oldLength = 0;
        }
    }
    //Board:2
//Name:ПИД регулятор
    _tempVariable_int = 1000;
    _PID_2.SetSampleTime(_tempVariable_int);
    _PID_2_Kd = (_menuValueArray_int[0]);
    _PID_2_Kp = (_menuValueArray_int[1]);
    _PID_2_Ki = (_menuValueArray_int[2]);
    _PID_2.SetTunings(_PID_2_Kp, _PID_2_Ki, _PID_2_Kd);
    _PID_2_In = _gtv2;
    _PID_2_SP = (_menuValueArray_float[0]);
    _PID_2.Compute();
    _tempVariable_unsignedlong = millis();
    if(_tempVariable_unsignedlong - _PID_2_StartTime>100) 
    {
        _PID_2_StartTime += 100;
    }
    if(_PID_2_Out > _tempVariable_unsignedlong - _PID_2_StartTime) 
    {
        _PID_2_RelOut = 1;
    }
      else 
    {
        _PID_2_RelOut = 0;
    }
    digitalWrite(11, _PID_2_RelOut);
    //Board:3
//Name:Датчик
    if(_isTimer(_d18x2x1Tti, 1000)) 
    {
        _d18x2x1Tti = millis();
        if (!_ow17W)
        {
            _ow17W=1;
            _d18x2x1W= 1;
            _ow17P= millis();
        }
         else 
        {
            if(_d18x2x1W) 
            {
                if(abs(millis()-_ow17P)>1000) 
                {
                    _tempVariable_float =  _readDS18_ow17(_d18x2x1Addr, 0);
                    if (_tempVariable_float < 500) 
                    {
                        _d18x2x1O = _tempVariable_float;
                    }
                    _d18x2x1W=0;
                    _ow17W=0;
                }
            }
        }
    }
    _gtv2 = (_d18x2x1O);
    //Board:4
//Name:Дисплей
    if (!(_gtv1)) 
    {
        _dispTempLength1 = ((((String("t ")) + ((_floatToStringWitRaz(_gtv2,2))) + (String(" C"))))).length();
        if (_disp2oldLength > _dispTempLength1) 
        {
            _isNeedClearDisp1 = 1;
        }
        _disp2oldLength = _dispTempLength1;
        _lcd1.setCursor(0, 0);
        _lcd1.print((((String("t ")) + ((_floatToStringWitRaz(_gtv2,2))) + (String(" C")))));
    }
     else 
    {
        if (_disp2oldLength > 0) 
        {
            _isNeedClearDisp1 = 1;
            _disp2oldLength = 0;
        }
    }
    if (!(_gtv1)) 
    {
        _dispTempLength1 = (((_floatToStringWitRaz((_menuValueArray_float[0]),2)))).length();
        if (_disp4oldLength > _dispTempLength1) 
        {
            _isNeedClearDisp1 = 1;
        }
        _disp4oldLength = _dispTempLength1;
        _lcd1.setCursor(11, 0);
        _lcd1.print(((_floatToStringWitRaz((_menuValueArray_float[0]),2))));
    }
     else 
    {
        if (_disp4oldLength > 0) 
        {
            _isNeedClearDisp1 = 1;
            _disp4oldLength = 0;
        }
    }
    if (!(_gtv1)) 
    {
        _dispTempLength1 = ((((String("V ")) + ((_floatToStringWitRaz(_gtv3,2))) + (String(" %"))))).length();
        if (_disp3oldLength > _dispTempLength1) 
        {
            _isNeedClearDisp1 = 1;
        }
        _disp3oldLength = _dispTempLength1;
        _lcd1.setCursor(0, 1);
        _lcd1.print((((String("V ")) + ((_floatToStringWitRaz(_gtv3,2))) + (String(" %")))));
    }
     else 
    {
        if (_disp3oldLength > 0) 
        {
            _isNeedClearDisp1 = 1;
            _disp3oldLength = 0;
        }
    }
}
String  _floatToStringWitRaz(float value, int raz)
{
    return String(value,raz);
}
bool _isTimer(unsigned long startTime, unsigned long period)
{
    unsigned long currentTime;
    currentTime = millis();
    if (currentTime>= startTime) 
    {
        return (currentTime>=(startTime + period));
    }
     else 
    {
        return (currentTime >=(4294967295-startTime+period));
    }
}
String _readStringFromProgmem (char *string)
{
    String result = String("");
    while (pgm_read_byte(string)!='\0')
    {
        result=result+ char(pgm_read_byte(string));
        	string++;
        	
    }
    return result;
}
void _menuUpEvents (int menuIndex)
{
    int tempIndex = pgm_read_byte(&_menuParametrsArray[((_MainMenus[menuIndex]).currentItem).startInArrayIndex]);
    int parIndex = pgm_read_byte(&_menuParametrsArray[ (((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+5]);
    int parentStartIndex;
    int parentStopIndex;
    if (parIndex == 0) 
    {
        parentStartIndex = (_MainMenus[menuIndex]).startIndex;
        parentStopIndex =(_MainMenus[menuIndex]).stopIndex;
    }
    else 
    {
        parentStartIndex = pgm_read_byte(&_menuParametrsArray[((_MenuItems[parIndex - 1]).startInArrayIndex)+3]);
        parentStopIndex = pgm_read_byte(&_menuParametrsArray[((_MenuItems[parIndex-1]).startInArrayIndex)+4]);
    }
    if (tempIndex == parentStartIndex) 
    {
        if((_MainMenus[menuIndex]).isSwitchMenuAroundRing) 
        {
            (_MainMenus[menuIndex]).currentItem = _MenuItems[parentStopIndex -1];
            return;
        }
         else
        {
            return;
        }
    }
    (_MainMenus[menuIndex]).currentItem = _MenuItems[tempIndex - 2];
    return;
}
void _menuDownEvents (int menuIndex)
{
    int tempIndex = pgm_read_byte(&_menuParametrsArray[((_MainMenus[menuIndex]).currentItem).startInArrayIndex]);
    int parIndex = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+5]);
    int parentStartIndex;
    int parentStopIndex;
    if (parIndex == 0) 
    {
        parentStartIndex = (_MainMenus[menuIndex]).startIndex;
        parentStopIndex =(_MainMenus[menuIndex]).stopIndex;
    }
    else 
    {
        parentStartIndex = pgm_read_byte(&_menuParametrsArray[((_MenuItems[parIndex-1]).startInArrayIndex)+3]);
        parentStopIndex = pgm_read_byte(&_menuParametrsArray[((_MenuItems[parIndex-1]).startInArrayIndex)+4]);
    }
    if (tempIndex == parentStopIndex) 
    {
        if((_MainMenus[menuIndex]).isSwitchMenuAroundRing) 
        {
            (_MainMenus[menuIndex]).currentItem = _MenuItems[parentStartIndex -1];
            return;
        }
         else
        {
            return;
        }
    }
    (_MainMenus[menuIndex]).currentItem = _MenuItems[tempIndex];
    return;
}
void _valueUpEvents (int menuIndex)
{
    int valIndex = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+2]);
    int itemType = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+1]);
    int indexMax = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+6]);
    int indexStep = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+8]);
    if (itemType == 4) 
    {
        _menuValueArray_int[valIndex -1] = _menuValueArray_int[valIndex -1] + (pgm_read_word(&_menuConstantValuesArray_int[indexStep -1]));
    }
    if (itemType == 8) 
    {
        _menuValueArray_float[valIndex -1] = _menuValueArray_float[valIndex -1] + (pgm_read_float(&_menuConstantValuesArray_float[indexStep -1]));
    }
}
void _valueDownEvents (int menuIndex)
{
    int valIndex = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+2]);
    int itemType = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+1]);
    int indexMin = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+7]);
    int indexStep = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+8]);
    if (itemType == 4) 
    {
        _menuValueArray_int[valIndex - 1] = _menuValueArray_int[valIndex - 1] - (pgm_read_word(&_menuConstantValuesArray_int[indexStep - 1]));
    }
    if (itemType == 8) 
    {
        _menuValueArray_float[valIndex - 1] = _menuValueArray_float[valIndex - 1] - (pgm_read_float(&_menuConstantValuesArray_float[indexStep - 1]));
    }
}
String _menuOutputValueString (int menuIndex)
{
    int itemType = pgm_read_byte(&_menuParametrsArray[ (((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+1]);
    int valIndex = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+2]);
    int indexMin = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+7]);
    int indexMax = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+6]);
    if(valIndex == 0)
    {
         return "";
    }
    int convFormat = pgm_read_byte(&_menuParametrsArray[(((_MainMenus[menuIndex]).currentItem).startInArrayIndex)+9]);
    if(itemType == 4) 
    {
         return _convertNamber(itemType, convFormat, valIndex, indexMax, indexMin);
    }
    if(itemType == 8) 
    {
         return _convertFloat(itemType, convFormat, valIndex, indexMax, indexMin);
    }
    return "";
}
void _menuUpdateToEEpromItems()
{
    (updateIntegerToEEPROM(1, 0, 0x0, ((_menuValueArray_int[0]))));
    (updateFloatToEEPROM(3, 0, 0x0, ((_menuValueArray_float[0]))));
    (updateIntegerToEEPROM(7, 0, 0x0, ((_menuValueArray_int[1]))));
    (updateIntegerToEEPROM(9, 0, 0x0, ((_menuValueArray_int[2]))));
}
String _convertNamber(int itemType, int convFormat, int valIndex, int indexMax, int indexMin)
{
    if (itemType== 4) 
    {
        if (convFormat == 4) 
        {
             return String((_menuValueArray_int[valIndex - 1 ]),DEC);
        }
        if (convFormat == 5) 
        {
             return String((_menuValueArray_int[valIndex - 1]),HEX);
        }
        if (convFormat == 6) 
        {
             return String((_menuValueArray_int[valIndex -1]),BIN);
        }
    }
    if (itemType== 8) 
    {
        if (convFormat == 4) 
        {
             return String((_menuValueArray_float[valIndex - 1 ]),DEC);
        }
        if (convFormat == 5) 
        {
             return String((_menuValueArray_float[valIndex - 1]),HEX);
        }
        if (convFormat == 6) 
        {
             return String((_menuValueArray_float[valIndex -1]),BIN);
        }
    }
    return "";
}
String _convertFloat(int itemType, int convFormat, int valIndex , int indexMax, int indexMin)
{
    return String((_menuValueArray_float[valIndex -1]),convFormat);
}
float _convertDS18x2xData(byte type_s, byte data[12])
{
    int16_t raw = (data[1] << 8) | data[0];
    if (type_s)
    {
        raw = raw << 3;
        if (data[7] == 0x10) 
        {
             raw = (raw & 0xFFF0) + 12 - data[6];
        }
    }
    else
    {
        byte cfg = (data[4] & 0x60);
        if (cfg == 0x00)raw = raw & ~7;
        else if(cfg == 0x20)raw = raw & ~3;
        else if(cfg == 0x40) raw = raw & ~1;
    }
    return  (float)raw / 16.0;
}
float _readDS18_ow17(byte addr[8], byte type_s)
{
    byte data[12];
    byte i;
    _ow17.reset();
    _ow17.select(addr);
    _ow17.write(0xBE);
    for (i = 0; i < 9; i++) 
    {
         data[i] = _ow17.read();
    }
    _ow17.reset();
    _ow17.select(addr);
    _ow17.write(0x44, 1);
    if (_ow17.crc8(data, 8) != data[8])
    {
        return 501;
    }
    return _convertDS18x2xData(type_s, data);
}
 byte readByteFromEEPROM(int addres, byte bitAddres, byte chipAddres)
{
    return EEPROM.read(addres);
}
void updateByteToEEPROM(int addres, byte bitAddres, byte chipAddres, byte value)
{
    return EEPROM.update(addres, value);
}
int readIntegerFromEEPROM(int addres, byte bitAddres, byte chipAddres)
{
    byte hight = readByteFromEEPROM(addres,  bitAddres,  chipAddres);
    byte low = readByteFromEEPROM((addres+1),  bitAddres,  chipAddres);
    return  word(hight, low);
}
void updateIntegerToEEPROM(int addres, byte bitAddres, byte chipAddres, int value)
{
    updateByteToEEPROM(addres,  bitAddres,  chipAddres, highByte(value));
    updateByteToEEPROM((addres+1),  bitAddres,  chipAddres, lowByte(value));
}
float readFloatFromEEPROM(int addres, byte bitAddres, byte chipAddres)
{
    byte x[4];
    for(byte i = 0; i < 4; i++) 
    {
         x[i] = readByteFromEEPROM((addres+i),  bitAddres,  chipAddres);
    }
    float *y = (float *)&x;
    return y[0];
}
void updateFloatToEEPROM(int addres, byte bitAddres, byte chipAddres, float value)
{
    byte *x = (byte *)&value;
    for(byte i = 0; i < 4; i++) 
    {
        updateByteToEEPROM((addres+i),  bitAddres,  chipAddres, x[i]);
    }
}
